{"file":"/home/heroku/Projects/Studying/NestJS/nestjs-task-managemenet/backend/src/tasks/tasks.service.ts","mappings":";;;;;;;;;;;;;;AAAA,2CAA8D;AAC9D,uDAAkD;AAClD,6CAAkD;AAQlD,IAAa,YAAY,GAAzB,MAAa,YAAY;IACxB,YAES,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IACpC,CAAC;IAEJ,KAAK,CAAC,QAAQ,CACb,SAA4B,EAC5B,IAAU;QAEV,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;IACrD,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,EAAU,EAAE,IAAU;QACvC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,EAAC,CAAC,CAAA;QAElF,IAAI,CAAC,KAAK,EAAE;YACX,MAAM,IAAI,0BAAiB,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAA;SAC3D;QAED,OAAO,KAAK,CAAA;IACb,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,aAA4B,EAAE,IAAU;QACxD,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC,CAAA;IAC3D,CAAC;IAED,KAAK,CAAC,UAAU,CACf,EAAU,EACV,IAAU;QAEV,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAC,CAAC,CAAA;QAEvE,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,0BAAiB,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAA;SAC3D;IACF,CAAC;IACD,KAAK,CAAC,gBAAgB,CACrB,EAAU,EACV,MAAkB,EAClB,IAAU;QAEV,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QAC7C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAA;QAEjB,OAAO,IAAI,CAAA;IACZ,CAAC;CACD,CAAA;AAhDY,YAAY;IADxB,mBAAU,EAAE;IAGV,WAAA,0BAAgB,CAAC,gCAAc,CAAC,CAAA;qCACT,gCAAc;GAH3B,YAAY,CAgDxB;AAhDY,oCAAY","names":[],"sources":["/home/heroku/Projects/Studying/NestJS/nestjs-task-managemenet/backend/src/tasks/tasks.service.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common'\nimport { TaskRepository } from './task.repository'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Task } from './task.entity'\nimport { CreateTaskDto } from './dto/create-task.dto'\nimport { TaskStatus } from './task-status.enum'\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto'\nimport { User } from '../auth/user.entity'\n\n@Injectable()\nexport class TasksService {\n\tconstructor(\n\t\t@InjectRepository(TaskRepository)\n\t\tprivate taskRepository: TaskRepository\n\t) {}\n\n\tasync getTasks(\n\t\tfilterDto: GetTasksFilterDto,\n\t\tuser: User\n\t): Promise<Task[]> {\n\t\treturn this.taskRepository.getTasks(filterDto, user)\n\t}\n\n\tasync getTaskById(id: number, user: User): Promise<Task> {\n\t\tconst found = await this.taskRepository.findOne({ where: { id, userId: user.id }})\n\n\t\tif (!found) {\n\t\t\tthrow new NotFoundException(`Task with ID ${id} not found`)\n\t\t}\n\n\t\treturn found\n\t}\n\n\tasync createTask(createTaskDto: CreateTaskDto, user: User): Promise<Task> {\n\t\treturn this.taskRepository.createTask(createTaskDto, user)\n\t}\n\n\tasync deleteTask(\n\t\tid: number,\n\t\tuser: User,\n\t): Promise<void> {\n\t\tconst result = await this.taskRepository.delete({ id, userId: user.id})\n\n\t\tif (result.affected === 0) {\n\t\t\tthrow new NotFoundException(`Task with ID ${id} not found`)\n\t\t}\n\t}\n\tasync updateTaskStatus(\n\t\tid: number,\n\t\tstatus: TaskStatus,\n\t\tuser: User\n\t): Promise<Task> {\n\t\tconst task = await this.getTaskById(id, user)\n\t\ttask.status = status\n\t\tawait task.save()\n\n\t\treturn task\n\t}\n}\n"],"version":3}