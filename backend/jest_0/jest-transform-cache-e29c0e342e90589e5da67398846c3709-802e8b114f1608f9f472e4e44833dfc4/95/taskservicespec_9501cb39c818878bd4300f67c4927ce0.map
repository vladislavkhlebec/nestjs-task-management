{"file":"/home/heroku/Projects/Studying/NestJS/nestjs-task-managemenet/backend/src/tasks/task.service.spec.ts","mappings":";;AAAA,6CAAsC;AACtC,mDAA8C;AAC9C,uDAAkD;AAElD,yDAA+C;AAE/C,MAAM,QAAQ,GAAG,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAA;AAE1C,MAAM,kBAAkB,GAAG,GAAG,EAAE,CAAC,CAAC;IACjC,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;IACnB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;CAClB,CAAC,CAAA;AAEF,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC5B,IAAI,YAAY,CAAA;IAChB,IAAI,cAAc,CAAA;IAElB,UAAU,CAAC,KAAK,IAAI,EAAE;QACrB,MAAM,MAAM,GAAG,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC7C,SAAS,EAAE;gBACV,4BAAY;gBACZ,EAAE,OAAO,EAAE,gCAAc,EAAE,UAAU,EAAE,kBAAkB,EAAE;aAC3D;SACD,CAAC,CAAC,OAAO,EAAE,CAAA;QAEZ,YAAY,GAAG,MAAO,MAAM,CAAC,GAAG,CAAe,4BAAY,CAAC,CAAA;QAC5D,cAAc,GAAG,MAAM,MAAM,CAAC,GAAG,CAAiB,gCAAc,CAAC,CAAA;IAClE,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YACnD,cAAc,CAAC,QAAQ,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAA;YAEtD,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAA;YACtD,MAAM,OAAO,GAAsB,EAAE,MAAM,EAAE,6BAAU,CAAC,WAAW,EAAE,MAAM,EAAE,mBAAmB,EAAC,CAAA;YACjG,6BAA6B;YAC7B,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAA;YAC7D,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAA;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;YACnC,qDAAqD;QACtD,CAAC,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,8EAA8E,EAAE,GAAG,EAAE;YACvF,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAC,CAAC,CAAA;QAC1F,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAE/C,CAAC,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;AACH,CAAC,CAAC,CAAA","names":[],"sources":["/home/heroku/Projects/Studying/NestJS/nestjs-task-managemenet/backend/src/tasks/task.service.spec.ts"],"sourcesContent":["import { Test } from '@nestjs/testing'\nimport { TasksService } from './tasks.service'\nimport { TaskRepository } from './task.repository'\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto'\nimport { TaskStatus } from './task-status.enum'\n\nconst mockUser = { username: 'Test user' }\n\nconst mockTaskRepository = () => ({\n\tgetTasks: jest.fn(),\n\tfindOne: jest.fn()\n})\n\ndescribe('TaskService', () => {\n\tlet tasksService\n\tlet taskRepository\n\n\tbeforeEach(async () => {\n\t\tconst module = await Test.createTestingModule({\n\t\t\tproviders: [\n\t\t\t\tTasksService,\n\t\t\t\t{ provide: TaskRepository, useFactory: mockTaskRepository }\n\t\t\t],\n\t\t}).compile()\n\n\t\ttasksService = await  module.get<TasksService>(TasksService)\n\t\ttaskRepository = await module.get<TaskRepository>(TaskRepository)\n\t})\n\n\tdescribe('getTasks', () => {\n\t\tit('Gets all tasks from the repository', async () => {\n\t\t\ttaskRepository.getTasks.mockResolvedValue('someValue')\n\n\t\t\texpect(taskRepository.getTasks).not.toHaveBeenCalled()\n\t\t\tconst filters: GetTasksFilterDto = { status: TaskStatus.IN_PROGRESS, search: 'Some search query'}\n\t\t\t// Call tasksService.getTasks\n\t\t\tconst result = await tasksService.getTasks(filters, mockUser)\n\t\t\texpect(taskRepository.getTasks).toHaveBeenCalled()\n\t\t\texpect(result).toEqual('someValue')\n\t\t\t// expect taskRepository.getTasks TO HAVE BEEN CALLED\n\t\t})\n\t})\n\n\tdescribe('getTaskById', () => {\n\t\tit('calls taskRepository.findOne() and successfully retrieve and return the task', () => {\n\t\t\ttaskRepository.findOne.mockResolvedValue({ title: 'Test task', description: 'Test desc'})\n\t\t})\n\n\t\tit('throw an error as task is not found', () => {\n\n\t\t})\n\t})\n})"],"version":3}