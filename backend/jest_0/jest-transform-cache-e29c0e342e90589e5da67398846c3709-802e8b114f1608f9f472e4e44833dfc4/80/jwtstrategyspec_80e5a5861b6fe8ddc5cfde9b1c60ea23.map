{"file":"/home/heroku/Projects/Studying/NestJS/nestjs-task-managemenet/backend/src/auth/jwt.strategy.spec.ts","mappings":";;AAAA,+CAA0C;AAC1C,6CAAsC;AACtC,uDAAkD;AAClD,+CAAoC;AAGpC,MAAM,kBAAkB,GAAG,GAAG,EAAE,CAAC,CAAC;IACjC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;CAClB,CAAC,CAAA;AACF,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC5B,IAAI,WAAuB,CAAA;IAC3B,IAAI,cAAc,CAAA;IAElB,UAAU,CAAC,KAAK,IAAI,EAAE;QACrB,MAAM,MAAM,GAAG,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC7C,SAAS,EAAE;gBACV,wBAAU;gBACV,EAAE,OAAO,EAAE,gCAAc,EAAE,UAAU,EAAE,kBAAkB,EAAE;aAC3D;SACD,CAAC,CAAC,OAAO,EAAE,CAAA;QAEZ,WAAW,GAAG,MAAM,MAAM,CAAC,GAAG,CAAa,wBAAU,CAAC,CAAA;QACtD,cAAc,GAAG,MAAO,MAAM,CAAC,GAAG,CAAiB,gCAAc,CAAC,CAAA;IACnE,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,IAAI,GAAG,IAAI,kBAAI,EAAE,CAAA;YACvB,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAA;YAE1B,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;YAC9C,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAA;YACnE,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAA;YAC7E,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAC7B,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAChE,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;YAE9C,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAC,CAAE,CAAC,CAAA;QACvD,CAAC,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;AACH,CAAC,CAAC,CAAA","names":[],"sources":["/home/heroku/Projects/Studying/NestJS/nestjs-task-managemenet/backend/src/auth/jwt.strategy.spec.ts"],"sourcesContent":["import { JwtStategy } from './jwt.stategy'\nimport { Test } from '@nestjs/testing'\nimport { UserRepository } from './user.repository'\nimport { User } from './user.entity'\n\n\nconst mockUserRepository = () => ({\n\tfindOne: jest.fn()\n})\ndescribe('JwtStrategy', () => {\n\tlet jwtStrategy: JwtStategy\n\tlet userRepository\n\n\tbeforeEach(async () => {\n\t\tconst module = await Test.createTestingModule({\n\t\t\tproviders: [\n\t\t\t\tJwtStategy,\n\t\t\t\t{ provide: UserRepository, useFactory: mockUserRepository },\n\t\t\t],\n\t\t}).compile()\n\n\t\tjwtStrategy = await module.get<JwtStategy>(JwtStategy)\n\t\tuserRepository = await  module.get<UserRepository>(UserRepository)\n\t})\n\n\tdescribe('validate', () => {\n\t\tit('validates and return the user based on JWT payload', async () => {\n\t\t\tconst user = new User()\n\t\t\tuser.username = 'TestUser'\n\n\t\t\tuserRepository.findOne.mockResolvedValue(user)\n\t\t\tconst result = await jwtStrategy.validate({ username: 'TestUser' })\n\t\t\texpect(userRepository.findOne).toHaveBeenCalledWith({ username: 'TestUser' })\n\t\t\texpect(result).toEqual(user)\n\t\t})\n\n\t\tit('throws unauthorized exception as user cannot be found', () => {\n\t\t\tuserRepository.findOne.mockResolvedValue(null)\n\n\t\t\texpect(jwtStrategy.validate({ username: 'TestUser'} ))\n\t\t})\n\t})\n})"],"version":3}