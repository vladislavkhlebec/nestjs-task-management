{"file":"/home/heroku/Projects/Studying/NestJS/nestjs-task-managemenet/backend/src/tasks/task.repository.ts","mappings":";;;;;;;;AAAA,qCAAsD;AACtD,+CAAoC;AAEpC,yDAA+C;AAG/C,2CAAoE;AAGpE,IAAa,cAAc,GAA3B,MAAa,cAAe,SAAQ,oBAAgB;IAApD;;QACS,WAAM,GAAG,IAAI,eAAM,CAAC,gBAAgB,CAAC,CAAA;IAyC9C,CAAC;IAxCA,KAAK,CAAC,QAAQ,CACb,SAA4B,EAC5B,IAAU;QAEV,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,SAAS,CAAA;QAEpC,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAA;QAE7C,KAAK,CAAC,KAAK,CAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAC,CAAC,CAAA;QAExD,IAAI,MAAM,EAAE;YACX,KAAK,CAAC,QAAQ,CAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,CAAC,CAAA;SACnD;QAED,IAAI,MAAM,EAAE;YACX,KAAK,CAAC,QAAQ,CAAC,4DAA4D,EAAE,EAAE,MAAM,EAAE,IAAI,MAAM,GAAG,EAAE,CAAC,CAAA;SACvG;QACD,IAAI;YACH,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAA;YACnC,OAAO,KAAK,CAAA;SACZ;QAAC,OAAO,CAAC,EAAE;YACX,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,IAAI,CAAC,QAAQ,cAAc,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAA;YACnH,MAAM,IAAI,qCAA4B,EAAE,CAAA;SACxC;IACF,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,aAA4B,EAAE,IAAU;QACxD,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,aAAa,CAAA;QAE5C,MAAM,IAAI,GAAG,IAAI,kBAAI,EAAE,CAAA;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAC9B,IAAI,CAAC,MAAM,GAAG,6BAAU,CAAC,IAAI,CAAA;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAA;QAEjB,OAAO,IAAI,CAAC,IAAI,CAAA;QAEhB,OAAO,IAAI,CAAA;IACZ,CAAC;CACD,CAAA;AA1CY,cAAc;IAD1B,0BAAgB,CAAC,kBAAI,CAAC;GACV,cAAc,CA0C1B;AA1CY,wCAAc","names":[],"sources":["/home/heroku/Projects/Studying/NestJS/nestjs-task-managemenet/backend/src/tasks/task.repository.ts"],"sourcesContent":["import { EntityRepository, Repository } from 'typeorm'\nimport { Task } from './task.entity'\nimport { CreateTaskDto } from './dto/create-task.dto'\nimport { TaskStatus } from './task-status.enum'\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto'\nimport { User } from '../auth/user.entity'\nimport {InternalServerErrorException, Logger} from \"@nestjs/common\";\n\n@EntityRepository(Task)\nexport class TaskRepository extends Repository<Task> {\n\tprivate logger = new Logger('TaskRepository')\n\tasync getTasks(\n\t\tfilterDto: GetTasksFilterDto,\n\t\tuser: User\n\t): Promise<Task[]> {\n\t\tconst { status, search } = filterDto\n\n\t\tconst query = this.createQueryBuilder('task')\n\n\t\tquery.where('task.userId = :userId', { userId: user.id})\n\n\t\tif (status) {\n\t\t\tquery.andWhere('task.status = :status', { status })\n\t\t}\n\n\t\tif (search) {\n\t\t\tquery.andWhere('(task.title LIKE :search OR task.description LIKE :search)', { search: `%${search}%` })\n\t\t}\n\t\ttry {\n\t\t\tconst tasks = await query.getMany()\n\t\t\treturn tasks\n\t\t} catch (e) {\n\t\t\tthis.logger.error(`Failed to get tasks for user \"${user.username}, Filters: ${JSON.stringify(filterDto)}`, e.stack)\n\t\t\tthrow new InternalServerErrorException()\n\t\t}\n\t}\n\n\tasync createTask(createTaskDto: CreateTaskDto, user: User) {\n\t\tconst { title, description } = createTaskDto\n\n\t\tconst task = new Task()\n\t\ttask.title = title\n\t\ttask.description = description\n\t\ttask.status = TaskStatus.OPEN\n\t\ttask.user = user\n\t\tawait task.save()\n\n\t\tdelete task.user\n\n\t\treturn task\n\t}\n}\n"],"version":3}