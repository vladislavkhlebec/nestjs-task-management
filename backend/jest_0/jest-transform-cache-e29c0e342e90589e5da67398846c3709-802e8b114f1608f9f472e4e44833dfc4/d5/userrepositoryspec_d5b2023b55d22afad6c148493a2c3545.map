{"file":"/home/heroku/Projects/Studying/NestJS/nestjs-task-managemenet/backend/src/auth/user.repository.spec.ts","mappings":";;AAAA,6CAAsC;AACtC,uDAAkD;AAClD,2CAAgF;AAChF,+CAAoC;AAEpC,MAAM,kBAAkB,GAAG,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAC,CAAA;AAEhF,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC/B,IAAI,cAAc,CAAA;IAElB,UAAU,CAAC,KAAK,IAAI,EAAE;QACrB,MAAM,MAAM,GAAG,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC7C,SAAS,EAAE;gBACV,gCAAc;aACd;SACD,CAAC,CAAC,OAAO,EAAE,CAAA;QAEZ,cAAc,GAAG,MAAM,MAAM,CAAC,GAAG,CAAiB,gCAAc,CAAC,CAAA;IAClE,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACvB,IAAI,IAAI,CAAA;QAER,UAAU,CAAC,GAAG,EAAE;YACf,IAAI,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAChB,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,CAAC,CAAA;QAC5D,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACzC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA;YACjC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAA;QACzE,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAChE,IAAI,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC,CAAA;YACxC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAAiB,CAAC,CAAA;QACrF,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAChE,IAAI,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,SAAS,EAAC,CAAC,CAAA,CAAC,sBAAsB;YACjE,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,qCAA4B,CAAC,CAAA;QAChG,CAAC,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACrC,IAAI,IAAI,CAAA;QACR,UAAU,CAAC,GAAG,EAAE;YACf,cAAc,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAElC,IAAI,GAAG,IAAI,kBAAI,EAAE,CAAA;YACjB,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAA;YAC9B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;QACnC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAE5D,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAEhD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAE/C,CAAC,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;AACH,CAAC,CAAC,CAAA","names":[],"sources":["/home/heroku/Projects/Studying/NestJS/nestjs-task-managemenet/backend/src/auth/user.repository.spec.ts"],"sourcesContent":["import { Test } from '@nestjs/testing'\nimport { UserRepository } from './user.repository'\nimport { ConflictException, InternalServerErrorException } from '@nestjs/common'\nimport { User } from './user.entity'\n\nconst mockCredentialsDto = { username: 'TestUsername', password: 'testPassword'}\n\ndescribe('UserRepository', () => {\n\tlet userRepository\n\n\tbeforeEach(async () => {\n\t\tconst module = await Test.createTestingModule({\n\t\t\tproviders: [\n\t\t\t\tUserRepository,\n\t\t\t],\n\t\t}).compile()\n\n\t\tuserRepository = await module.get<UserRepository>(UserRepository)\n\t})\n\n\tdescribe('signUp', () => {\n\t\tlet save\n\n\t\tbeforeEach(() => {\n\t\t\tsave = jest.fn()\n\t\t\tuserRepository.create = jest.fn().mockReturnValue({ save })\n\t\t})\n\n\t\tit('successfully signs up the user', () => {\n\t\t\tsave.mockResolvedValue(undefined)\n\t\t\texpect(userRepository.signUp(mockCredentialsDto)).resolves.not.toThrow()\n\t\t})\n\n\t\tit('throws a conflict exception as username alreay exists', () => {\n\t\t\tsave.mockRejectedValue({ code: '23505'})\n\t\t\texpect(userRepository.signUp(mockCredentialsDto)).rejects.toThrow(ConflictException)\n\t\t})\n\n\t\tit('throws a conflict exception as username alreay exists', () => {\n\t\t\tsave.mockRejectedValue({ code: '2350123'}) //unhandled error code\n\t\t\texpect(userRepository.signUp(mockCredentialsDto)).rejects.toThrow(InternalServerErrorException)\n\t\t})\n\t})\n\n\tdescribe('validateUserPassword', () => {\n\t\tlet user\n\t\tbeforeEach(() => {\n\t\t\tuserRepository.findOne = jest.fn()\n\n\t\t\tuser = new User()\n\t\t\tuser.username = 'TestUsername'\n\t\t\tuser.validatedPassword = jest.fn()\n\t\t})\n\n\t\tit('returns the username as validation is successful', () => {\n\n\t\t})\n\n\t\tit('returns null as user cannot be found', () => {\n\n\t\t})\n\n\t\tit('returns null as password is invalid', () => {\n\n\t\t})\n\t})\n})"],"version":3}