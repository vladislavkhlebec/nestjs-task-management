{"file":"/home/heroku/Projects/Studying/NestJS/nestjs-task-managemenet/backend/src/auth/user.entity.spec.ts","mappings":";;AAAA,+CAAoC;AACpC,mCAAkC;AAElC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC5B,IAAI,IAAU,CAAA;IAEd,UAAU,CAAC,GAAG,EAAE;QACf,IAAI,GAAG,IAAI,kBAAI,EAAE,CAAA;QACjB,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAA;QAC9B,IAAI,CAAC,IAAI,GAAG,UAAU,CAAA;QACtB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;IACxB,CAAC,CAAC,CAAA;IACF,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAA;YAC3C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAA;YAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAA;YACpD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAA;YAC9D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAC7B,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,CAAA;YAC5C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAA;YAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAA;YAC3D,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAA;YAC9D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QAC9B,CAAC,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;AACH,CAAC,CAAC,CAAA","names":[],"sources":["/home/heroku/Projects/Studying/NestJS/nestjs-task-managemenet/backend/src/auth/user.entity.spec.ts"],"sourcesContent":["import { User } from './user.entity'\nimport * as bcrypt from 'bcryptjs'\n\ndescribe('User entity', () => {\n\tlet user: User\n\n\tbeforeEach(() => {\n\t\tuser = new User()\n\t\tuser.password = 'testPassword'\n\t\tuser.salt = 'testSalt'\n\t\tbcrypt.hash = jest.fn()\n\t})\n\tdescribe('validatePassword', () => {\n\t\tit('returns true as password is valid', async () => {\n\t\t\tbcrypt.hash.mockReturnValue('testPassword')\n\t\t\texpect(bcrypt.hash).not.toHaveBeenCalled()\n\t\t\tconst result = await user.validatePassword('123456')\n\t\t\texpect(bcrypt.hash).toHaveBeenCalledWith('123456', 'testSalt')\n\t\t\texpect(result).toEqual(true)\n\t\t})\n\n\t\tit('returns false as password is invalid', async () => {\n\t\t\tbcrypt.hash.mockReturnValue('wrongPassword')\n\t\t\texpect(bcrypt.hash).not.toHaveBeenCalled()\n\t\t\tconst result = await user.validatePassword('wrondPassword')\n\t\t\texpect(bcrypt.hash).toHaveBeenCalledWith('123456', 'testSalt')\n\t\t\texpect(result).toEqual(false)\n\t\t})\n\t})\n})"],"version":3}